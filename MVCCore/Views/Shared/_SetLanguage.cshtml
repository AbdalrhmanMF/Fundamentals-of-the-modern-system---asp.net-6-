@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options

@inject IViewLocalizer Localizer
@inject IOptions<RequestLocalizationOptions> LocOptions
@*
@{
    var requestCulture = Context.Features.Get<IHttpRequestFeature>();
    var cultureItems = locOption.Value.SupportedUICultures
    .Select(x => new SelectListItem { Value = x.Name, Text = x.DisplayName }).ToList();
}

<div title="@localizer["Request Culture provider:"] @requestCulture?.Provider?.GetType().Name">

</div>*@


@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    var cultureItems = new List<SelectListItem>();
    //cultureItems.Add(new SelectListItem { Value = "", Text = Localizer["Select Lang"].Value });
    cultureItems.AddRange(LocOptions.Value.SupportedUICultures
        .Select(c => new SelectListItem { Value = c.Name, Text = c.NativeName })
        .ToList());
    var returnURL = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
}

<div title="@Localizer["Request culture provider:"] @requestCulture?.Provider?.GetType().Name">
    <form id="selectLanguage" method="post" asp-controller="Home" asp-action="SetLang" asp-route-returnUrl="@returnURL" >
        @*<label asp-for="@requestCulture.RequestCulture.UICulture.Name">@Localizer["Language:"]</label>*@
        <select name="culture" onchange="this.form.submit();" asp-for="@requestCulture.RequestCulture.UICulture.Name" asp-items="cultureItems">
        </select>
    </form>
</div>

